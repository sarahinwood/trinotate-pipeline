#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from trinotate_pipeline.__main__ import get_full_path

###########
# GLOBALS #
###########

# from config
blast_db = config['blast_db']
hmmer_db = config['hmmer_db']
max_threads = config['threads']
outdir = config['outdir']
sqlite_db = config['sqlite_db']
trinity_fasta = config['trinity_fasta']

# intermediate results
blastp_results = os.path.join(
    outdir, 'blastp/blastp.outfmt6')
blastx_results = os.path.join(
    outdir, 'blastx/blastx.outfmt6')
hmmer_results = os.path.join(
    outdir, 'hmmer/TrinotatePFAM.out')
ids = os.path.join(
    outdir, 'signalp/ids.csv')
log_directory = os.path.join(
    outdir, 'logs')
renamed_transdecoder = os.path.join(
    outdir, 'signalp/renamed_transdecoder_results.fasta')
rnammer_directory = os.path.join(
    outdir, 'rnammer')
rnammer_results = os.path.join(
    outdir, 'rnammer/Trinity.fasta.rnammer.gff')
tmhmm_results = os.path.join(
    outdir, 'tmhmm/tmhmm.out')
signalp_results = os.path.join(
    outdir, 'signalp/signalp.out')
signalp_gff = os.path.join(
    outdir, 'signalp/signalp.gff')
signalp_renamed_gff = os.path.join(
    outdir, 'signalp/renamed_signalp_gff.gff2')
transdecoder_directory = os.path.join(
    outdir, 'TransDecoder')
transdecoder_results = os.path.join(
    transdecoder_directory, 'Trinity.fasta.transdecoder.pep')
trinotate_annotation_report = os.path.join(
    outdir, 'trinotate/trinotate_annotation_report.txt')
trinotate_database = os.path.join(
    outdir, 'trinotate/Trinotate.sqlite')
trinity_gene_trans_map = os.path.join(
    outdir,
    'trinotate/Trinity.fasta.gene_trans_map')

# script paths
rename_fasta_headers = get_full_path('rename_fasta_headers.py')
rename_gff = get_full_path('rename_gff.R')

#########
# RULES #
#########

rule TransDecoder:
    input:
        trinity_fasta = trinity_fasta
    output:
        transdecoder_results,
        td_fasta = temp(os.path.join(transdecoder_directory, 'Trinity.fasta'))
    threads:
        1
    params:
        w_dir = transdecoder_directory
    log:
        os.path.join(log_directory, 'TransDecoder.log')
    shell:
        'bash -c \''
        'cp {input.trinity_fasta} {output.td_fasta} ; '
        'cd {params.w_dir}  || exit 1 ; '
        'TransDecoder.LongOrfs -t Trinity.fasta -S ; '
        'TransDecoder.Predict -t Trinity.fasta '
        '\' &> {log}'

rule blastp:
    input:
        transdecoder_results = transdecoder_results,
        db = blast_db
    output:
        blastp_results
    threads:
        max_threads - 1
    shell:
        'blastp '
        '-db {input.db} '
        '-query {input.transdecoder_results} '
        '-num_threads {threads} '
        '-max_target_seqs 1 '
        '-outfmt 6 > {output}'

rule blastx:
    input:
        trinity_fasta = trinity_fasta,
        db = blast_db
    output:
        blastx_results
    threads:
        max_threads - 1
    shell:
        'blastx '
        '-db {input.db} '
        '-query {input.trinity_fasta} '
        '-num_threads {threads} '
        '-max_target_seqs 1 '
        '-outfmt 6 > {output}'

rule hmmscan:
    input:
        transdecoder_results = transdecoder_results,
        db = hmmer_db
    output:
        hmmer_results
    priority:
        1
    threads:
        1
    log:
        os.path.join(log_directory, 'hmmscan.log')
    shell:
        'hmmscan '
        '--cpu {threads} '
        '--domtblout {output} '
        '{input.db} '
        '{input.transdecoder_results} '
        '> {log}'

rule get_Trinity_gene_to_trans_map_pl:
    input:
        trinity_fasta
    output:
        trinity_gene_trans_map
    threads:
        1
    shell:
        'get_Trinity_gene_to_trans_map.pl '
        '{input} '
        '> {output}'

rule Trinotate_LOAD:
    input:
        fasta = trinity_fasta,
        gene_trans_map = trinity_gene_trans_map,
        transdecoder = transdecoder_results,
        blastx = blastx_results,
        blastp = blastp_results,
        hmmer = hmmer_results,
        db = sqlite_db
    output:
        trinotate_database
    threads:
        1
    log:
        os.path.join(log_directory, 'Trinotate_LOAD.log')
    shell:
        'bash -c \''
        'cp {input.db} {output} ; '
        'Trinotate '
        '{output} init '
        '--gene_trans_map {input.gene_trans_map} '
        '--transcript_fasta {input.fasta} '
        '--transdecoder_pep {input.transdecoder} ; '
        'Trinotate {output} LOAD_swissprot_blastx {input.blastx} ; '
        'Trinotate {output} LOAD_swissprot_blastp {input.blastp} ; '
        'Trinotate {output} LOAD_pfam {input.hmmer} '
        '\' &> {log}'

rule Trinotate_report:
    input:
        trinotate_database
    output:
        trinotate_annotation_report
    threads:
        1
    log:
        os.path.join(log_directory, 'Trinotate_report.log')
    shell:
        'Trinotate {input} report > {output} 2> {log}'
